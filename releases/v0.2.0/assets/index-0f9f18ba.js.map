{"version":3,"file":"index-0f9f18ba.js","sources":["../../../src/events/event.ts","../../../src/hooks/usePreferences.ts","../../../src/utilities/isArrayOfString.ts","../../../src/utilities/getFileNameFromURL.ts","../../../src/hooks/useLoadSpectra.ts","../../../src/NMRiumWrapper.tsx","../../../src/utilities/loadFilesFromURLs.ts","../../../src/demo/NMRiumWrapperDemo.tsx","../../../src/index.tsx"],"sourcesContent":["import { EventType, EventData } from './types';\nimport ALLOWED_ORIGINS from '../allowed-origins.json';\n\nconst namespace = 'nmr-wrapper';\n\nfunction trigger<T extends EventType>(type: T, data: EventData<T>) {\n  window.parent.postMessage({ type: `${namespace}:${type}`, data }, '*');\n}\n\nfunction on<T extends EventType>(\n  type: T,\n  dataListener: (data: EventData<T>) => void,\n  options?: boolean | AddEventListenerOptions,\n) {\n  function listener(event: MessageEvent) {\n    const {\n      origin,\n      data: { type: targetType, data },\n    } = event;\n\n    const url = new URL(origin);\n\n    const skipOriginCheck =\n      ALLOWED_ORIGINS.length === 0 || ALLOWED_ORIGINS.includes('*');\n\n    if (!skipOriginCheck && !ALLOWED_ORIGINS.includes(url.origin)) {\n      throw new Error(`Invalid Origin ${origin}`);\n    }\n\n    if (`${namespace}:${type}` === targetType) {\n      dataListener?.(data);\n    }\n  }\n  window.addEventListener(`message`, listener, options);\n\n  return () => window.removeEventListener(`message`, listener);\n}\n\nexport default { trigger, on };\n","import { NMRiumPreferences, NMRiumWorkspace } from 'nmrium';\nimport { useLayoutEffect, useState } from 'react';\n\nexport function usePreferences() {\n  const [configuration, setConfiguration] = useState<{\n    preferences: any;\n    workspace: NMRiumWorkspace | undefined;\n  }>({ preferences: {}, workspace: undefined });\n\n  useLayoutEffect(() => {\n    const { href } = window.location;\n    const parameters = new URL(href).searchParams;\n\n    let preferences: any | undefined;\n    let workspace: NMRiumWorkspace | undefined;\n\n    if (parameters.has('workspace')) {\n      workspace = parameters.get('workspace') as NMRiumWorkspace;\n    }\n    if (parameters.has('preferences')) {\n      preferences = JSON.parse(\n        parameters.get('preferences') || '',\n      ) as NMRiumPreferences;\n    }\n    setConfiguration({ preferences, workspace });\n  }, []);\n\n  return configuration;\n}\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isArrayOfString(data: any[]) {\n  return data.every((url) => typeof url === 'string');\n}\n","export function getFileNameFromURL(url: string) {\n  return url.substring(url.lastIndexOf('/') + 1);\n}\n","import { useCallback, useMemo, useState } from 'react';\nimport { read, readFromWebSource, NmriumState } from 'nmr-load-save';\nimport { fileCollectionFromFiles } from 'filelist-utils';\nimport events from '../events';\nimport { isArrayOfString } from '../utilities/isArrayOfString';\nimport { getFileNameFromURL } from '../utilities/getFileNameFromURL';\n\nasync function loadSpectraFromFiles(files: File[]) {\n  const fileCollection = await fileCollectionFromFiles(files);\n  const {\n    nmriumState: { data },\n  } = await read(fileCollection);\n  // eslint-disable-next-line no-restricted-syntax\n  if (data) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const spectrum of data.spectra) {\n      spectrum.sourceSelector = {};\n    }\n  }\n  return data;\n}\n\nasync function loadSpectraFromURLs(urls: string[]) {\n  const entries = urls.map((url) => {\n    const refURL = new URL(url);\n    let name = getFileNameFromURL(url);\n    const hasExtension = name && name.indexOf('.') !== -1;\n    if (!hasExtension) {\n      name = `${name}.zip`;\n    }\n    return { relativePath: refURL.pathname, baseURL: refURL.origin };\n  }, []);\n\n  const { data } = await readFromWebSource({ entries });\n\n  return data;\n}\n\ntype NMRiumData = NmriumState['data'];\n\nexport function useLoadSpectra() {\n  const [data, setData] = useState<NMRiumData>({ spectra: [], molecules: [] });\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const load = useCallback(\n    async (options: { urls: string[] } | { files: File[] }) => {\n      setLoading(true);\n      try {\n        if ('urls' in options) {\n          if (isArrayOfString(options.urls)) {\n            const result = await loadSpectraFromURLs(options.urls);\n            setData(result as NMRiumData);\n          } else {\n            throw new Error('The input must be a valid urls array of string[]');\n          }\n        } else if ('files' in options) {\n          const result = await loadSpectraFromFiles(options.files);\n          setData(result as NMRiumData);\n        }\n      } catch (error: any) {\n        events.trigger('error', error);\n        // eslint-disable-next-line no-console\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [],\n  );\n\n  return useMemo(\n    () => ({\n      data,\n      load,\n      isLoading,\n    }),\n    [data, isLoading, load],\n  );\n}\n","import NMRium, { NMRiumData, NMRiumRef, OnNMRiumChange } from 'nmrium';\nimport { useEffect, useState, useCallback, CSSProperties, useRef } from 'react';\nimport events from './events';\nimport { usePreferences } from './hooks/usePreferences';\nimport { useLoadSpectra } from './hooks/useLoadSpectra';\n\nconst styles: Record<'container' | 'loadingContainer', CSSProperties> = {\n  container: {\n    height: '100%',\n    width: '100%',\n  },\n\n  loadingContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ffffffc9',\n    fontSize: '1.4em',\n    userSelect: 'none',\n    WebkitUserSelect: 'none',\n  },\n};\n\nexport type { NMRiumData };\n\nexport default function NMRiumWrapper() {\n  const nmriumRef = useRef<NMRiumRef>(null);\n  const [data, setDate] = useState<NMRiumData>();\n  const { workspace, preferences } = usePreferences();\n  const dataChangeHandler = useCallback<OnNMRiumChange>((state, source) => {\n    events.trigger('data-change', { data: state, source });\n  }, []);\n\n  const { load: loadSpectra, isLoading, data: loadedData } = useLoadSpectra();\n\n  useEffect(() => {\n    if (!isLoading) {\n      setDate(loadedData as unknown as NMRiumData);\n    }\n  }, [isLoading, loadedData]);\n\n  useEffect(() => {\n    const clearActionListener = events.on('action-request', (request) => {\n      switch (request.type) {\n        case 'exportSpectraViewerAsBlob': {\n          const blob = nmriumRef.current?.getSpectraViewerAsBlob();\n          if (blob) {\n            events.trigger('action-response', {\n              type: request.type,\n              data: blob,\n            });\n          }\n          break;\n        }\n        default: {\n          throw new Error(\n            `ERROR! Property 'type' accept only 'exportViewerAsBlob'.`,\n          );\n        }\n      }\n    });\n    const clearLoadListener = events.on('load', (loadData) => {\n      switch (loadData.type) {\n        case 'nmrium':\n          setDate(loadData.data);\n          break;\n        case 'file':\n          loadSpectra({ files: loadData.data });\n          break;\n        case 'url':\n          loadSpectra({ urls: loadData.data });\n          break;\n\n        default: {\n          throw new Error(\n            `ERROR! Property 'type' accept only nmrium, url or file.`,\n          );\n        }\n      }\n    });\n\n    return () => {\n      clearLoadListener();\n      clearActionListener();\n    };\n  });\n\n  return (\n    <div style={styles.container}>\n      {isLoading && (\n        <div style={styles.loadingContainer}>\n          <span>Loading .... </span>\n        </div>\n      )}\n      <NMRium\n        ref={nmriumRef}\n        data={data}\n        onChange={dataChangeHandler}\n        preferences={preferences}\n        workspace={workspace}\n      />\n    </div>\n  );\n}\n","import { getFileNameFromURL } from './getFileNameFromURL';\n\nexport function loadFilesFromURLs(urls: string[]): Promise<File[]> {\n  const fetches = urls.map((url) =>\n    fetch(url)\n      .then((response) => response.arrayBuffer())\n      .then((data) => {\n        let name = getFileNameFromURL(url);\n        const hasExtension = name && name.indexOf('.') !== -1;\n        if (!hasExtension) {\n          name = `${name}.zip`;\n        }\n        return new File([data], name);\n      }),\n  );\n\n  return Promise.all(fetches);\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Button from 'nmrium/lib/component/elements/Button';\nimport { NMRiumData } from 'nmrium';\nimport events from '../events';\nimport NMRiumWrapper from '../NMRiumWrapper';\nimport jsonData from './data/test.json';\nimport { loadFilesFromURLs } from '../utilities/loadFilesFromURLs';\n\nconst styles = {\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  header: css`\n    height: 40px;\n    width: 100%;\n    padding: 5px;\n    display: flex;\n  `,\n};\n\nexport default function NMRiumWrapperDemo() {\n  return (\n    <div css={styles.container}>\n      <div id=\"header\" css={styles.header}>\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: jsonData as NMRiumData,\n              type: 'nmrium',\n            });\n          }}\n        >\n          Test load from json\n        </Button.Done>\n\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: [\n                'https://cheminfo.github.io/nmr-dataset-demo/cytisine/13c.jdx',\n                'https://cheminfo.github.io/nmr-dataset-demo/cytisine/1h.jdx',\n                'https://cheminfo.github.io/bruker-data-test/data/zipped/aspirin-1h.zip',\n                // '../data/13c.zip',\n                // 'https://cloud.uni-jena.de/s/y72GbCX8bJbmpJT/download/10.zip',\n                // 'https://cloud.uni-jena.de/s/jsMed9fmqWZzo6r/download/53.zip',\n              ],\n              type: 'url',\n            });\n          }}\n        >\n          Test Load from URLS\n        </Button.Done>\n        <Button.Done\n          onClick={async () => {\n            const files = await loadFilesFromURLs(['../data/13c.zip']);\n            events.trigger('load', {\n              data: files,\n              type: 'file',\n            });\n          }}\n        >\n          Test Load Files\n        </Button.Done>\n      </div>\n\n      <NMRiumWrapper />\n    </div>\n  );\n}\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\nimport NMRiumWrapper from './NMRiumWrapper';\nimport NMRiumWrapperDemo from './demo/NMRiumWrapperDemo';\n\nconst rootContainer = document.getElementById('root');\n\nif (!rootContainer) {\n  throw new Error('#root element is not exists in the dom');\n}\n\nconst root = createRoot(rootContainer);\n\nfunction RootWrapper() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<NMRiumWrapper />} />\n        <Route path=\"/demo\" element={<NMRiumWrapperDemo />} />\n      </Routes>\n    </Router>\n  );\n}\n\nroot.render(<RootWrapper />);\n"],"names":["namespace","trigger","type","data","on","dataListener","options","listener","event","origin","targetType","url","ALLOWED_ORIGINS","usePreferences","configuration","setConfiguration","useState","useLayoutEffect","href","parameters","preferences","workspace","isArrayOfString","getFileNameFromURL","loadSpectraFromFiles","files","fileCollection","fileCollectionFromFiles","read","spectrum","loadSpectraFromURLs","urls","entries","refURL","name","readFromWebSource","useLoadSpectra","setData","isLoading","setLoading","load","useCallback","result","error","events","useMemo","styles","NMRiumWrapper","nmriumRef","useRef","setDate","dataChangeHandler","state","source","loadSpectra","loadedData","useEffect","clearActionListener","request","blob","_a","clearLoadListener","loadData","jsxs","jsx","NMRium","loadFilesFromURLs","fetches","response","css","NMRiumWrapperDemo","Button","jsonData","rootContainer","root","createRoot","RootWrapper","Router","Routes","Route"],"mappings":"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"}