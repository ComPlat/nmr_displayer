name : Build and Deploy to Prod

on:
  push:
    branches: [prod-helm-deploy]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER_PROD: nmrxiv-dev
  GKE_ZONE: europe-west3-a
  DEPLOYMENT_NAME: nmrxiv-nmrium
  REPOSITORY_NAME_PROD: nmrxiv-dev
  IMAGE: nmrium

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: 16.x
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run ESLint
  #       run: npm run eslint
  #     - name: Run Prettier
  #       run: npm run prettier
  #     - name: Check types
  #       run: npm run check-types

  setup-build-publish-deploy-prod:
    name: deploy to prod
    if: github.ref == 'refs/heads/prod-helm-deploy'
    runs-on: ubuntu-latest
    #needs: lint
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud auth configure-docker europe-west3-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.3.0
      with:
        cluster_name: ${{ env.GKE_CLUSTER_PROD }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    #Fetch last release
    - uses: actions/checkout@v2
    - name: Fetch latest release
      id: fetch-latest-release
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{ github.token }}
        exclude_types: "draft|prerelease"
        view_top: 10
    - name: "Print release name"
      run: |
        echo "tag_name: ${{ steps.fetch-latest-release.outputs.tag_name }}"

    # Build the Docker image
    - name: Build Image
      run: |-
        if [ ${{ steps.fetch-latest-release.outputs.tag_name }} ]; then
          docker build --build-arg RELEASE_VERSION=${{ steps.fetch-latest-release.outputs.tag_name }} -f Dockerfile.prod --tag europe-west3-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME_PROD/$IMAGE:latest .
        else
          echo "Skipping build as no release available.";
        fi

    - uses: actions/checkout@v2
      run: |-
        npm install
        npm run build -- --outDir=build
        npm run build -- --outDir=build/releases/${{ steps.fetch-latest-release.outputs.tag_name }}
    - name: Setup Build and Commit to repo
      uses: EndBug/add-and-commit@v9
      with: 
        default_author: github_actions

    # Push the Docker image to Google Artifact Registry
    - name: Publish Image to Google Artifact Registry
      if: ${{ steps.fetch-latest-release.outputs.tag_name }}
      run: |-
        docker push "europe-west3-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME_PROD/$IMAGE:latest"

    # Deploy the latest Docker image to the GKE cluster
    - name: Deploy
      if: ${{ steps.fetch-latest-release.outputs.tag_name }}
      run: |-
        kubectl rollout restart deployment/$DEPLOYMENT_NAME
        kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=300s
        kubectl get services -o wide
